{"version":3,"file":"AccordionPanel.cjs","sources":["../../../src/components/Accordion/AccordionPanel.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState } from \"react\";\nimport type { AccordionProps } from \"./Accordion\";\nimport { AccordionPanelContext } from \"./AccordionPanelContext\";\n\nexport interface AccordionPanelProps extends AccordionProps {\n  isOpen?: boolean;\n  setOpen?: () => void;\n}\n\nexport function AccordionPanel({ children, ...props }: AccordionPanelProps) {\n  const { alwaysOpen } = props;\n  const [isOpen, setOpen] = useState(props.isOpen);\n\n  const provider = alwaysOpen\n    ? {\n        ...props,\n        isOpen,\n        setOpen: () => setOpen(!isOpen),\n      }\n    : props;\n\n  return <AccordionPanelContext.Provider value={provider}>{children}</AccordionPanelContext.Provider>;\n}\n\nAccordionPanel.displayName = \"AccordionPanel\";\n"],"names":["useState","jsx","AccordionPanelContext"],"mappings":";;;;;;AAKO,SAAS,cAAc,CAAC,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,EAAE;AACvD,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,KAAK;AAC9B,EAAE,MAAM,CAAC,MAAM,EAAE,OAAO,CAAC,GAAGA,cAAQ,CAAC,KAAK,CAAC,MAAM,CAAC;AAClD,EAAE,MAAM,QAAQ,GAAG,UAAU,GAAG;AAChC,IAAI,GAAG,KAAK;AACZ,IAAI,MAAM;AACV,IAAI,OAAO,EAAE,MAAM,OAAO,CAAC,CAAC,MAAM;AAClC,GAAG,GAAG,KAAK;AACX,EAAE,uBAAuBC,cAAG,CAACC,2CAAqB,CAAC,QAAQ,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;AAC3F;AACA,cAAc,CAAC,WAAW,GAAG,gBAAgB;;;;"}